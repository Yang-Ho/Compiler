Input file: tests/fibonacci.c
Data_Decls, int
Id_List, array
Id, array
Id Tail, [
Expression, 16
Id_List_Prime, ;
Data_Decls, void
Id_List, initialize_array
Id, initialize_array
Id Tail, (
Leftover: [
Leftover: 16
Leftover: ]
Leftover: ;
Leftover: void
Leftover: initialize_array
Leftover: (
Leftover: void
Leftover: )
Leftover: {
Leftover: int
Leftover: idx
Leftover: ,
Leftover: bound
Leftover: ;
Leftover: bound
Leftover: =
Leftover: 16
Leftover: ;
Leftover: idx
Leftover: =
Leftover: 0
Leftover: ;
Leftover: while
Leftover: (
Leftover: idx
Leftover: <
Leftover: bound
Leftover: )
Leftover: {
Leftover: array
Leftover: [
Leftover: idx
Leftover: ]
Leftover: =
Leftover: -
Leftover: 1
Leftover: ;
Leftover: idx
Leftover: =
Leftover: idx
Leftover: +
Leftover: 1
Leftover: ;
Leftover: }
Leftover: }
Leftover: int
Leftover: fib
Leftover: (
Leftover: int
Leftover: val
Leftover: )
Leftover: {
Leftover: if
Leftover: (
Leftover: val
Leftover: <
Leftover: 2
Leftover: )
Leftover: {
Leftover: return
Leftover: 1
Leftover: ;
Leftover: }
Leftover: if
Leftover: (
Leftover: array
Leftover: [
Leftover: val
Leftover: ]
Leftover: ==
Leftover: -
Leftover: 1
Leftover: )
Leftover: {
Leftover: array
Leftover: [
Leftover: val
Leftover: ]
Leftover: =
Leftover: fib
Leftover: (
Leftover: val
Leftover: -
Leftover: 1
Leftover: )
Leftover: +
Leftover: fib
Leftover: (
Leftover: val
Leftover: -
Leftover: 2
Leftover: )
Leftover: ;
Leftover: }
Leftover: return
Leftover: array
Leftover: [
Leftover: val
Leftover: ]
Leftover: ;
Leftover: }
Leftover: int
Leftover: main
Leftover: (
Leftover: void
Leftover: )
Leftover: {
Leftover: int
Leftover: idx
Leftover: ,
Leftover: bound
Leftover: ;
Leftover: bound
Leftover: =
Leftover: 16
Leftover: ;
Leftover: initialize_array
Leftover: (
Leftover: )
Leftover: ;
Leftover: idx
Leftover: =
Leftover: 0
Leftover: ;
Leftover: print
Leftover: (
Leftover: "The first few digits of the Fibonacci sequence are:\n"
Leftover: )
Leftover: ;
Leftover: while
Leftover: (
Leftover: idx
Leftover: <
Leftover: bound
Leftover: )
Leftover: {
Leftover: write
Leftover: (
Leftover: fib
Leftover: (
Leftover: idx
Leftover: )
Leftover: )
Leftover: ;
Leftover: idx
Leftover: =
Leftover: idx
Leftover: +
Leftover: 1
Leftover: ;
Leftover: }
Leftover: }
Leftover: 
Pass variable 1 functions 0 statement 0
